#!/usr/bin/env python
import argparse
import sqlite3
import sys
from os.path import expanduser

HOME_DIR = expanduser("~")
DATABASE_FILE_NAME = '.birthday.sqlite'
DATABASE_FILE_PATH = '{}/{}'.format(HOME_DIR, DATABASE_FILE_NAME)
TABLE_NAME = 'Birthdays'
CAPTCHA_LENGTH = 3


class BirthdayRecord:
    def __init__(self, name, year=0, month=0, day=0, ignore=0):
        self.year = int(year)
        self.month = int(month)
        self.day = int(day)
        self.name = name
        self.ignore = ignore

    def __str__(self):
        return '[' + self.print() + ']'

    def print(self):
        ignore_color = ''
        end_color = ''
        if self.ignore:
            ignore_color = '\033[1;30m'
            end_color = '\033[m'

        return '{start_color}{year}/{month}/{day} {name}{end_color}'.format(
                year=self.q4(self.year),
                month=self.q2(self.month),
                day=self.q2(self.day),
                name=self.name,
                start_color=ignore_color,
                end_color=end_color,
            )

    # question marks
    def q(self, value, width):
        if value == 0:
            return '-' * width

        return '{:0>2}'.format(value)

    def q4(self, value):
        return self.q(value, 4)

    def q2(self, value):
        return self.q(value, 2)

    # colored question marks
    def cq4(self, value1, value2):
        qs = self.q4(value1)
        if value1 == value2:
            return qs
        return '\033[1;33m{}\033[m'.format(qs)

    # colored question marks
    def cq2(self, value1, value2):
        qs = self.q2(value1)
        if value1 == value2:
            return qs
        return '\033[1;33m{}\033[m'.format(qs)

    def copy(self):
        return BirthdayRecord(self.name, year=self.year, month=self.month, day=self.day, ignore=self.ignore)

    def update(self, another_record):
        if not isinstance(another_record, BirthdayRecord):
            return

        if another_record.year != 0:
            self.year = another_record.year

        if another_record.month != 0:
            self.month = another_record.month

        if another_record.day != 0:
            self.day = another_record.day

    def write_to_db(self, conn):
        cursor = conn.cursor()
        sql = 'UPDATE {table_name} SET year={year}, month={month}, day={day} WHERE name=\'{name}\';'.format(
            year=self.year,
            month=self.month,
            day=self.day,
            name=self.name,
            table_name=TABLE_NAME,)
        cursor.execute(sql)
        conn.commit()

    def insert_to_db(self, conn):
        cursor = conn.cursor()
        sql = '''INSERT INTO {table_name}
            (id, name, year, month, day)
            VALUES (NULL, "{name}", {year}, {month}, {day});'''.format(
                year=self.year,
                month=self.month,
                day=self.day,
                name=self.name,
                table_name=TABLE_NAME,)
        cursor.execute(sql)
        conn.commit()

    def __eq__(self, another_record):
        if not isinstance(another_record, BirthdayRecord):
            return False

        return self.name == another_record.name and \
               self.year == another_record.year and \
               self.month == another_record.month and \
               self.day == another_record.day

    def diff(self, another_record):
        if not isinstance(another_record, BirthdayRecord):
            return str(self)

        return '[{year}/{month}/{day} {name}]'.format(
                year=self.cq4(self.year, another_record.year),
                month=self.cq2(self.month, another_record.month),
                day=self.cq2(self.day, another_record.day),
                name=self.name
            )


def _check_db():
    try:
        conn = sqlite3.connect(DATABASE_FILE_PATH)
        cur = conn.cursor()
        cur.execute('''SELECT name FROM sqlite_master
            WHERE type="table" AND name="{table_name}";'''.format(table_name=TABLE_NAME))
        if cur.fetchone() is None:
            cur.execute('''CREATE TABLE "{table_name}" (
                "id" INTEGER PRIMARY KEY AUTOINCREMENT,
                "year" INTEGER DEFAULT 0,
                "month" INTEGER DEFAULT 0,
                "day" INTEGER DEFAULT 0,
                "name" TEXT DEFAULT "(empty)",
                "ignore" INTEGER DEFAULT 0
                );'''.format(table_name=TABLE_NAME))
            conn.commit()

        return conn

    except sqlite3.DatabaseError as e:
        print('{} is corrupted, please remove it and try again.'.format(DATABASE_FILE_PATH))
        conn.close()
        exit(1)


def _find_existed_record(cur, name):
    # single quote needed here, double quote means **identifier** in sqlite
    cur.execute("SELECT id,year,month,day,name,ignore FROM {table_name} WHERE name='{name}';".format(
        table_name=TABLE_NAME, name=name))
    old_record = cur.fetchone()
    if old_record is None:
        return None

    year, month, day, name, ignore = old_record[1:6]
    return BirthdayRecord(name, year=year, month=month, day=day, ignore=ignore)


def _gen_captcha():
    import random
    import string
    return ''.join(random.sample(string.ascii_lowercase + string.digits, CAPTCHA_LENGTH))


def _captcha(func):
    def wrapped_func(*args):
        while True:
            captcha = _gen_captcha()
            func(*args)
            print('Input captcha to confirm, or Ctrl-C to cancel [{}]:'.format(captcha), end=' ')
            if input().strip() == captcha:
                return True

            print('Captcha incorrect.')
            print()

    return wrapped_func


@_captcha
def _ask_user_to_replace(old_record, new_record):
    print('Update record: {old_record} -> {new_record},'.format(
        old_record=old_record.diff(new_record),
        new_record=new_record.diff(old_record),))


def _insert_new_record(conn, new_record):
    cur = conn.cursor()
    new_record.insert_to_db(conn)
    print('Record {new_record} has been added into database {database_file}.'.format(
        new_record=new_record,
        database_file=DATABASE_FILE_PATH,))


def help_operation(args):
    if args.subcommand is None:
        args.top_parser.print_help()
        args.top_parser.exit()

    if args.subcommand not in args.subparser_list:
        args.top_parser.error('subcommand {} is not available.'.format(args.subcommand))

    args.subparser_list[args.subcommand].print_help()
    args.subparser_list[args.subcommand].exit()

def add_operation(args):
    import re
    m = re.match(r'^(?:(\d{4}|xxxx)/)?(\d\d|xx)/(\d\d|xx)$', args.date)
    if m:
        month_day_str = m.group
        input_year = 0 if m.group(1) in (None, 'xxxx') else int(m.group(1))
        input_month = 0 if m.group(2) == 'xx' else int(m.group(2))
        input_day = 0 if m.group(3) == 'xx' else int(m.group(3))
    else:
        args.parser.error('Date should be in format 1991/11/02, 11/02, xxxx/11/02 or 1991/11/xx.')

    if (input_year, input_month, input_day) == (0, 0, 0):
        args.parser.error('At least one of { year | month | day } needed.')

    input_record = BirthdayRecord(args.name, year=input_year, month=input_month, day=input_day)

    conn = _check_db()
    cur = conn.cursor()
    old_record = _find_existed_record(cur, args.name)

    if old_record is not None:
        new_record = old_record.copy()
        new_record.update(input_record)
        if new_record == old_record:
            print('Record {old_record} not changed.'.format(old_record=old_record))
            return

        _ask_user_to_replace(old_record, new_record)
        new_record.write_to_db(conn)
        print('Record {new_record} has been updated into database {database_file}.'.format(
            new_record=new_record,
            database_file=DATABASE_FILE_PATH,))

    else:
        _insert_new_record(conn=conn, new_record=input_record)


def show_operation(args):

    def _parse_constrains(parser, constrains_list):
        import re

        constrains = {}
        for c in constrains_list:
            m = re.match(r'^(.+)=(.+)', c)
            if m is not None:
                key = m.group(1)
                value = m.group(2)
                if key not in ('year', 'age', 'month', 'day', 'name', 'next'):
                    parser.error('Invalid constrain: {}'.format(key))

                if key in constrains:
                    parser.error('Duplicate constrain: {}'.format(key))

                constrains[key] = value

            else:
                if c not in ('next', 'all'):
                    parser.error('Invalid constrain: {}'.format(c))

                constrains[c] = True

        # check constrain logic
        if 'year' in constrains and 'age' in constrains:
            parser.error('"year" constrain should not be used with "age."')

        return constrains

    constrains = _parse_constrains(args.parser, args.constrain)

    condition_list = []
    if 'age' in constrains:
        import datetime
        base_date = datetime.date.today()
        constrains['year'] = base_date.year - int(constrains['age'])
        del constrains['age']

    month_name_list = [
        'January', 'February', 'March',
        'April', 'May', 'June',
        'July', 'August', 'September',
        'October', 'November', 'December',
        'Jan', 'Feb', 'Mar',
        'Apr', 'May', 'Jun',
        'Jul', 'Aug', 'Sep',
        'Oct', 'Nov', 'Dec',
        ]
    if 'month' in constrains:
        if constrains['month'] in month_name_list:
            index = month_name_list.index(constrains['month'])
            constrains['month'] = (index % 12) + 1

        elif not constrains['month'].isdigit():
            args.parser.error('Invalid value for month: {}'.format(constrains['month']))

    for i in ('year', 'month', 'day'):
        if i in constrains:
            condition_list.append('{}={}'.format(i, constrains[i]))

    if 'all' not in constrains:
        condition_list.append('ignore=0')

    if 'name' in constrains:
        condition_list.append('name LIKE \'%{}%\''.format(constrains['name']).replace('%%%', '%').replace('%%', '%'))

    if 'next' not in constrains:
        constrains['next'] = 400

    condition_str = ''
    if len(condition_list) > 0:
        condition_str = 'WHERE {}'.format(' AND '.join(condition_list))

    import datetime
    base_date = datetime.date.today()

    conn = _check_db()
    cur = conn.cursor()
    cur.execute('SELECT * FROM Birthdays {cond} ORDER BY month, day, year, name, ignore;'.format(cond=condition_str))

    if constrains['next'] == True:
        first_record = None
        for row in cur:
            year, month, day, name, ignore = row[1:6]
            row_date = datetime.date(base_date.year, month, day)
            delta_days = (row_date - base_date).days
            record = BirthdayRecord(name, year=year, month=month, day=day, ignore=ignore)
            if first_record is None:
                first_record = record

            if delta_days >= 0:
                print(record.print())
                exit()

        if first_record is not None:
            print(record.print())
            exit()

    constrain_days = constrains['next']
    for row in cur:
        year, month, day, name, ignore = row[1:6]
        row_date = datetime.date(base_date.year, month, day)
        delta_days = (row_date - base_date).days % 365
        if 0 <= delta_days and delta_days <= int(constrains['next']):
            print(BirthdayRecord(name, year=year, month=month, day=day, ignore=ignore).print())


@_captcha
def _ask_user_to_ignore(name, ignore):
    print('{verb} {name},'.format(verb=['Follow', 'Ignore'][ignore], name=name))


def _ignore_user(args, ignore):
    conn = _check_db()
    cur = conn.cursor()
    cur.execute('SELECT name,ignore FROM {table_name} WHERE name=\'{name}\''.format(table_name=TABLE_NAME, name=args.name))
    old_record = _find_existed_record(cur, args.name)
    if old_record is None:
        args.parser.error('Record {name} does not exist.'.format(name=args.name))

    if old_record.ignore == ignore:
        args.parser.error('Record {name} already {verb}'.format(name=args.name, verb=['followed', 'ignored'][ignore]))

    _ask_user_to_ignore(args.name, ignore)

    cur.execute('UPDATE {table_name} SET ignore={ignore} WHERE name=\'{name}\';'.format(
        table_name=TABLE_NAME, name=args.name, ignore=ignore))
    conn.commit()
    print('Record {name} is now {verb}.'.format(name=args.name, verb=['followed', 'ignored'][ignore]))


def ignore_operation(args):
    _ignore_user(args, 1)


def follow_operation(args):
    _ignore_user(args, 0)


@_captcha
def _ask_user_to_delete(name):
    print('Delete {name},'.format(name=name))


def delete_operation(args):
    conn = _check_db()
    cur = conn.cursor()
    cur.execute('SELECT name FROM {table_name} WHERE name=\'{name}\''.format(table_name=TABLE_NAME, name=args.name))
    old_record = _find_existed_record(cur, args.name)
    if old_record is None:
        args.parser.error('Record {name} does not exist.'.format(name=args.name))

    _ask_user_to_delete(args.name)

    cur.execute('DELETE FROM {table_name} WHERE name=\'{name}\';'.format(
        table_name=TABLE_NAME, name=args.name))
    conn.commit()
    print('Record {name} had been removed.'.format(name=args.name))


@_captcha
def _ask_user_to_rename(old_name, new_name):
    print('Rename {old_name} to {new_name},'.format(old_name=old_name, new_name=new_name))


def rename_operation(args):
    conn = _check_db()
    cur = conn.cursor()
    cur.execute('SELECT name FROM {table_name} WHERE name=\'{name}\''.format(table_name=TABLE_NAME, name=args.old_name))
    old_record = _find_existed_record(cur, args.old_name)
    if old_record is None:
        args.parser.error('Record {name} does not exist.'.format(name=args.old_name))

    _ask_user_to_rename(args.old_name, args.new_name)

    cur.execute('UPDATE {table_name} SET name=\'{new_name}\' WHERE name=\'{old_name}\';'.format(
        table_name=TABLE_NAME, new_name=args.new_name, old_name=args.old_name))
    conn.commit()
    print('Record {old_name} had been renamed to {new_name}.'.format(old_name=args.old_name, new_name=args.new_name))


def examples_operation(args):
    print('# show default help page')
    print('$ birthday help')
    print('')
    print('# show subcommand help page')
    print('$ birthday help help')
    print('')
    print('# add a record to database')
    print('$ birthday add vim 1991/xx/xx')
    print('')
    print('# update a record in database')
    print('$ birthday update vim xxxx/11/02')
    print('')
    print('# show all records in database except ignored')
    print('$ birthday show')
    print('')
    print('# show records in 1991')
    print('$ birthday show year=1991')
    print('')
    print('# show records which is 21 years old')
    print('$ birthday show age=21')
    print('')
    print('# show records in November')
    print('$ birthday show month=Nov')
    print('$ birthday show month=11')
    print('')
    print('# show records in specific day')
    print('$ birthday show month=11 day=2')
    print('')
    print('# show record contains keyword (case sensitive)')
    print('$ birthday show name=i')
    print('')
    print('# show next record from today')
    print('$ birthday show next')
    print('')
    print('# show records coming in 3 days')
    print('$ birthday show next=3')
    print('')
    print('# show all records include ignored')
    print('$ birthday show all')
    print('')
    print('# hide a record')
    print('$ birthday ignore vim')
    print('')
    print('# unhide a record')
    print('$ birthday follow vim')
    print('')
    print('# delete a record')
    print('$ birthday delete vim')
    print('')
    print('# rename a record')
    print('$ birthday rename vim VIM')


def main():
    top_parser = argparse.ArgumentParser(
        description='Manage birthdays of your friends.',
        add_help=False)
    subparsers = top_parser.add_subparsers(
        title='Available subcommands',
        metavar=' '*40)

    parser_help = subparsers.add_parser(
        'help',
        help='help page for subcommands',
        add_help=False)
    parser_help.add_argument('subcommand', type=str, nargs='?')
    parser_help.set_defaults(func=help_operation)

    parser_add = subparsers.add_parser('add',
        help='add records',
        description='Add/Update new records into database.',
        aliases=['update'], add_help=False)
    parser_add.add_argument('name', type=str, help='the name of your friend')
    parser_add.add_argument('date', type=str, help='birthday of your friend, in xxxx/xx/xx format')
    parser_add.set_defaults(func=add_operation)
    parser_add.set_defaults(parser=parser_add)

    parser_show = subparsers.add_parser('show',
        help='show records',
        description='Show records with filtering constrains.',
        add_help=False)
    parser_show.add_argument('constrain', type=str, nargs='*', help='available constrains: year, age, month, day, name, next, all')
    parser_show.set_defaults(func=show_operation)
    parser_show.set_defaults(parser=parser_show)

    parser_ignore = subparsers.add_parser('ignore',
        help='hide records',
        description='Hide records, without deleting them.',
        add_help=False)
    parser_ignore.add_argument('name', type=str, help='the name of your friend')
    parser_ignore.set_defaults(func=ignore_operation)
    parser_ignore.set_defaults(parser=parser_ignore)

    parser_follow = subparsers.add_parser('follow',
        help='unhide records',
        description='Unhide records, you are friends again.',
        add_help=False)
    parser_follow.add_argument('name', type=str, help='the name of your friend')
    parser_follow.set_defaults(func=follow_operation)
    parser_follow.set_defaults(parser=parser_follow)

    parser_delete = subparsers.add_parser('delete',
        help='delete records',
        description='Delete records from database, goodbye.',
        add_help=False)
    parser_delete.add_argument('name', type=str, help='the name of your friend')
    parser_delete.set_defaults(func=delete_operation)
    parser_delete.set_defaults(parser=parser_delete)

    parser_rename = subparsers.add_parser('rename',
        help='rename records',
        description='Rename your friend.',
        add_help=False)
    parser_rename.add_argument('old_name', type=str, help='the old name of your friend')
    parser_rename.add_argument('new_name', type=str, help='the new name of your friend')
    parser_rename.set_defaults(func=rename_operation)
    parser_rename.set_defaults(parser=parser_rename)

    parser_examples = subparsers.add_parser('examples',
        help='example usages',
        description='',
        add_help=False)
    parser_examples.set_defaults(func=examples_operation)

    parser_help.set_defaults(top_parser=top_parser)
    parser_help.set_defaults(subparser_list={
        'help': parser_help,
        'show': parser_show,
        'add': parser_add,
        'update': parser_add,
        'ignore': parser_ignore,
        'follow': parser_follow,
        'delete': parser_delete,
        'rename': parser_rename,
        'examples': parser_examples,
        })

    try:
        args = top_parser.parse_args()
        if not hasattr(args, 'func'):
            top_parser.print_help()
            exit(1)

        args.func(args)
    except KeyboardInterrupt:
        exit(1)


if __name__ == '__main__':
    main()
